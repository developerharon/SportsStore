Chapter 8: SportsStore: A real Application

My application, called SportsStore, will follow the classic approach taken by online stores everywhere. I will create an online product catalog that customers can browse by category and page, a shopping cart where users can add and remove products, and a checkout where customers can enter their shipping details. I will also create an administration area that includes create, read, update, and delete (CRUD) facilities for managing the catalog, and I will protect it so that only logged-in administrators can make changes. 
My goal in this branch, and those that I will add is to give you a sense of what real MVC development is like by creating a realistic an example as possible. I want to focus on ASP.NET Core MVC, of course, so I have simplified the integration with external systems, such as the database, and omitted others entirely, such as payment processing. 
You might find the going a little show as I build up the levels of infrastructure I need, but the initial investment in an MVC application pays dividends, resulting in maintainable, extensible, well-structured code with excellent support for unit testing.
Most of the MVC features I use for the SportsStore application have their own chapters. 
I will call out each step needed to build the application so that you can see how the MVC features fit together. You should pay particular attention when I create views. You will get some odd results if you do not follow the examples closely.

Configuring the Application
The Startup class is resposnsible for configuring the ASP.NET Core application.
The ConfigureServices method is used to set up shared objects that can be used throughtout the application through the dependency injection feature. The AddMvc method that I called in the ConfigureServices method is an extension that sets up the shared objects used in the MVC applications.
The Configure method is used to set up the features that receive and process HTTP requests. Each method that I called in the Configure method is an extension method that sets up an HTTP request processor.

Next, I need to configure the application for Razor views.
The @using statement will allow me to use the types in the SportsStore.Models namespace in views without needing to refer to the namespace. The @addTagHelper statement enables the built-in tag helpers, which I use later to create HTML elements that reflect the configuration of the SportsStore application.